import * as AWS from 'aws-sdk';
import * as payloadSchema from './create-schema.json';
import * as schema from '../../../schemas/leejameshr_payslip/payslipuploaded/leejameshr.payslip@PayslipUploaded-v1.json';

import { APIGatewayEvent, APIGatewayProxyHandler, APIGatewayProxyResult } from 'aws-lambda';
import {
  AppError,
  Logger,
  checkFileExists,
  commonHeaders,
  errorHandler,
  errorTypes,
  logLevels,
  successHandler,
  validate,
  writeFileToBucket,
} from '../../shared';
import { v4 as uuidv4, v5 as uuidv5 } from 'uuid';

import { Event } from '../../../schemas/leejameshr_payslip/payslipuploaded/Event';
import { Marshaller } from '../../../schemas/leejameshr_payslip/payslipuploaded/marshaller/Marshaller';
import { Payslip } from '../../types';
import { config } from '../../config/config';

const METHOD = 'create-payslip.handler';
const eventBridge = new AWS.EventBridge();

export const handler: APIGatewayProxyHandler = async ({ body }: APIGatewayEvent): Promise<APIGatewayProxyResult> => {
  try {
    const correlationId = uuidv4();

    Logger.info(`CorrelationId: ${correlationId} ${METHOD} - started`);

    const parsedPayslip: Payslip = body ? JSON.parse(body) : {};

    // validate the payslip payload from API Gateway against the create payslip schema
    validate(parsedPayslip, payloadSchema, 'create-payslip', 'create-payslip#/components/schemas/Event');

    const { logo } = parsedPayslip;

    // v5 uuid will always ensure that we get the same key based on nasmespace and properties
    const payslipKey = uuidv5(`${parsedPayslip.employee.id}${parsedPayslip.period}`, config.namespace);

    // get the file type and key
    const type = logo.split(';')[0].split('/')[1];
    const fileKey = `${payslipKey}.${type}`;

    Logger.info(
      `CorrelationId: ${correlationId} ${METHOD} - fileKey: ${fileKey}, type: ${type}, bucket: ${config.payslipLogoBucket}`,
    );

    // if payslip for this employee and period already exists then throw an error (you would typically use a database for your meta data here)
    const exists = await checkFileExists(config.payslipLogoBucket, fileKey);

    if (exists) {
      // we want to ensure that this POST endpoint is idempotent and we don't generate the payslip multiple times
      const errorMessage = `Payslip already exists for employee ${parsedPayslip.employee.id} and period ${parsedPayslip.period}`;
      throw new AppError(errorMessage, errorMessage, errorTypes.ACCESS_FORBIDDEN, logLevels.ERROR);
    }

    // get the base64 logo as a buffer for S3 storage as an image
    const logoBuffer = Buffer.from(logo.replace(/^data:image\/\w+;base64,/, ''), 'base64');

    // write the image to S3 and store a pointer the file in the event so it can be consumed from the pdf generation lambda
    const { Location: location } = await writeFileToBucket(
      config.payslipLogoBucket,
      fileKey,
      logoBuffer,
      `image/${type}`,
    );

    // marshall the JSON using the autogenerated code from EventBridge
    const payslip: Event = Marshaller.marshall(parsedPayslip, 'Event');

    payslip.correlationId = correlationId; // this will allow us to track this process through distributed logs
    payslip.logoUrl = location;
    payslip.logoBucket = config.payslipLogoBucket;
    payslip.logoKey = fileKey;
    payslip.payslipKey = payslipKey;

    // validate the payslip event against the event schema that is shared across domains before sending it to EventBridge
    validate(payslip, schema, 'payslip', 'payslip#/components/schemas/Event');

    const entry = {
      EventBusName: config.eventBusName,
      Source: config.payslipUploadedEventSource,
      DetailType: config.payslipUploadedEventDetailType,
      Detail: JSON.stringify(payslip),
    };

    const event: AWS.EventBridge.PutEventsRequest = {
      Entries: [entry],
    };

    const createEvent = await eventBridge.putEvents(event).promise();

    Logger.info(
      `CorrelationId: ${correlationId} ${METHOD} - success response: failed count: ${createEvent.FailedEntryCount}`,
    );

    return successHandler(
      {
        message: 'Created',
      },
      201,
      commonHeaders,
    );
  } catch (error: any) {
    Logger.error(`${METHOD} - error: ${error}`);
    return errorHandler(error, commonHeaders);
  }
};
